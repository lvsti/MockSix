import MockSix

@testable import <# TARGET MODULE NAME #>

protocol DefaultInitializable {
    init()
}

class Dummy<T> {}

extension Dummy where T : DefaultInitializable {
    static var value: T { return T() }
}

<%- include("CaseUtils.swifttemplate") %>
<%- include("TypeUtils.swifttemplate") %>
<%- include("SyntaxUtils.swifttemplate") %>

<%
CaseUtils.acronyms = ["api", "id", "json", "uri", "url", "xml"]

func mockClassName(for type: Type) -> String {
    var className = type.name
    if className.hasSuffix("Protocol") {
        let nsName = className as NSString
        className = nsName.substring(to: nsName.length - 8)
    }
    return "Mock" + className
}

var dummyValueTypes: [String: (Type?, TypeName)] = [:]
var selfClassName: String!

func dummyValue(for type: Type?, typeName: TypeName) -> String {
    if typeName.isOptional || typeName.isImplicitlyUnwrappedOptional {
        return "nil"
    }
    else if typeName.isArray {
        return "[]"
    }
    else if typeName.isDictionary {
        return "[:]"
    }
    else if typeName.isTuple, let tuple = typeName.tuple {
        let list = tuple.elements
            .flatMap { dummyValue(for: $0.type, typeName: $0.typeName) }
            .joined(separator: ", ")
        
        return "(" + list + ")"
    }
    else if typeName.isClosure, let closure = typeName.closure {
        if closure.returnTypeName.isVoid {
            return "{ _ in }"
        }
        else {
            return "{ _ in " + dummyValue(for: closure.returnType, typeName: closure.returnTypeName) + " }"
        }
    }
    else if let type = type, type.kind == "protocol", type.annotations["mockable"] != nil {
        return mockClassName(for: type) + "() as " + typeName.name
    }
    else {
        if typeName.name == "Self" {
            return selfClassName + "()"
        }
        else {
            dummyValueTypes[typeName.name] = (type, typeName)
            return "Dummy<" + typeName.name + ">.value"
        }
    }
}

func encodedParameters(from params: [SourceryRuntime.MethodParameter]) -> String {
    return params
        .map { param in
            guard let label = param.argumentLabel, label != param.name else {
                return CaseUtils.lowerFirstWord(of: param.name)
            }
            
            let upperFirstParam = CaseUtils.upperFirstWord(of: param.name)
            if label.hasSuffix(upperFirstParam) {
                return CaseUtils.lowerFirstWord(of: label)
            }
            else {
                return CaseUtils.lowerFirstWord(of: label) + upperFirstParam
            }
        }
        .joined(separator: "_")
}

func methodID(forMethod method: SourceryRuntime.Method) -> String {
    if let annotation = method.annotations["mockMethodID"] as? String {
        return annotation
    }
    
    let tail = encodedParameters(from: method.parameters)
    
    return method.callName + (tail.isEmpty ? "" : "_" + tail)
}

func methodID(forSubscript subscriptFunc: SourceryRuntime.Subscript) -> String {
    if let annotation = subscriptFunc.annotations["mockMethodID"] as? String {
        return annotation
    }
    
    let tail = encodedParameters(from: subscriptFunc.parameters)
    
    return "subscript" + (tail.isEmpty ? "" : "_" + tail)
}

func parameterList(from parameters: [SourceryRuntime.MethodParameter], whitespace: String) -> String {
    return parameters
        .map { param in
            var argLabel = ""
            if let label = param.argumentLabel {
                if label != param.name {
                    argLabel = label + " "
                }
            }
            else {
                argLabel = "_ "
            }

            let paramTypeName: String
            if !param.typeName.name.contains("Self") {
                paramTypeName = param.typeName.name
            }
            else {
                paramTypeName = rewrittenTypeName(param.typeName, byReplacingSelfWith: selfClassName)
            }

            return argLabel + param.name + ": " + paramTypeName
        }
        .joined(separator: "," + whitespace)
}

func methodSignature(forMethod method: SourceryRuntime.Method, usingHangingIndentation: Bool = false) -> String {
    let indentation = usingHangingIndentation ?
        "\n" + String(repeating: " ", count: (method.shortName as NSString).length + 1) :
        " "
    
    let paramList = parameterList(from: method.parameters, whitespace: indentation)
    
    let throwsAnnotation = method.throws ? " throws" : method.rethrows ? " rethrows" : ""
    let returnType = method.returnTypeName.name.contains("Self") ? 
        rewrittenTypeName(method.returnTypeName, byReplacingSelfWith: selfClassName) : 
        method.returnTypeName.name
    let returns = method.returnTypeName.isVoid ? "" : " -> " + returnType
    
    return method.shortName + "(" + paramList + ")" + throwsAnnotation + returns
}

func methodSignature(forSubscript subscriptFunc: SourceryRuntime.Subscript, usingHangingIndentation: Bool = false) -> String {
    let indentation = usingHangingIndentation ?
        "\n" + String(repeating: " ", count: ("subscript" as NSString).length + 1) :
        " "
    
    let paramList = parameterList(from: subscriptFunc.parameters, whitespace: indentation)
    
    let returnType = subscriptFunc.returnTypeName.name.contains("Self") ? 
        rewrittenTypeName(subscriptFunc.returnTypeName, byReplacingSelfWith: selfClassName) : 
        subscriptFunc.returnTypeName.name
    let returns = subscriptFunc.returnTypeName.isVoid ? "" : " -> " + returnType
    
    return "subscript(" + paramList + ")" + returns
}

func rewrittenTypeName(_ typeName: TypeName, byReplacingSelfWith replacement: String) -> String {
    var result = ""

    SyntaxUtils.visit(typeName) { syntax in
        switch syntax {
        case .arrayBegin: result += "["
        case .arrayEnd: result += "]"
        case .dictionaryBegin: result += "["
        case .dictionarySeparator: result += ": "
        case .dictionaryEnd: result += "]"
        case .tupleBegin: result += "("
        case .tupleSeparator: result += ", "
        case .tupleEnd: result += ")"
        case .closureParameterListBegin: result += "("
        case .closureParameterSeparator: result += ", "
        case .closureParameterListEnd: result += ")"
        case .closureArrow: result += " -> "
        case .closureReturnBegin: break
        case .closureReturnEnd: break
        case .type(let tn): result += tn.name != "Self" ? tn.name : replacement
        }
        return true
    }

    return result
}

var result = ""

for proto in types.protocols where proto.annotations["mockable"] != nil {
    let hasSelfReq = TypeUtils.protocolHasSelfRequirement(proto)
    selfClassName = mockClassName(for: proto)

    if hasSelfReq {
        result += "final "
    }
    result += "class " + selfClassName + ": NSObject, " + proto.name + ", Mock {\n"
    
    if !proto.allMethods.isEmpty || !proto.subscripts.isEmpty {
        result += "    enum Methods: Int {\n"
        for method in proto.allMethods where !method.isInitializer {
            result += "        /// " + methodSignature(forMethod: method) + "\n"
            result += "        case " + methodID(forMethod: method) + "\n"
        }
        for sub in proto.subscripts {
            let subID = methodID(forSubscript: sub)
            let sig = methodSignature(forSubscript: sub)
            result += "        /// " + sig + "\n"
            result += "        case " + subID + "_getter\n"
            if sub.isMutable {
                result += "        /// " + sig + "\n"
                result += "        case " + subID + "_setter\n"
            }
        }
        result += "    }\n    typealias MockMethod = Methods\n"
    }
    else {
        result += "    typealias MockMethod = Int\n"
    }
    
    for method in proto.allMethods where !method.isInitializer {
        for (attrName, attr) in method.attributes {
            result += "    " + attr.description + "\n"
        }
        
        let signature = methodSignature(forMethod: method, usingHangingIndentation: true)
        result += "    " + (method.isStatic ? "static " : "") + 
            "func " + signature.replacingOccurrences(of: "\n", with: "\n         ") + " {\n"
        
        let registerCall =
            "        " +
            (method.returnTypeName.isVoid ? "" : "return ") +
            (method.throws || method.rethrows ? "try registerThrowingInvocation" : "registerInvocation") +
            "("
        
        let hangingIndentation = String(repeating: " ", count: (registerCall as NSString).length)
        
        result += registerCall + "for: ." + methodID(forMethod: method)
        
        if !method.parameters.isEmpty {
            result += ",\n" + hangingIndentation + "args: "
            result += method.parameters.map { $0.name }.joined(separator: ", ")
        }
        
        if !method.returnTypeName.isVoid {
            result += ",\n" + hangingIndentation + "andReturn: "
            result += dummyValue(for: method.returnType, typeName: method.returnTypeName)
        }
        
        result += ")\n"
        result += "    }\n"
    }

    for sub in proto.subscripts {
        for (attrName, attr) in sub.attributes {
            result += "    " + attr.description + "\n"
        }
        
        let subID = methodID(forSubscript: sub)
        let signature = methodSignature(forSubscript: sub, usingHangingIndentation: true)
        result += "    " + signature.replacingOccurrences(of: "\n", with: "\n         ") + " {\n"

        result += "        get {\n"
        var registerCall = "            return registerInvocation("
        var hangingIndentation = String(repeating: " ", count: (registerCall as NSString).length)
        result += registerCall + "for: ." + subID + "_getter"
        result += ",\n" + hangingIndentation + "args: "
        result += sub.parameters.map { $0.name }.joined(separator: ", ")
        result += ",\n" + hangingIndentation + "andReturn: "
        result += dummyValue(for: sub.returnType, typeName: sub.returnTypeName)
        result += ")\n"
        result += "        }\n"

        if sub.isMutable {
            result += "        set {\n"
            registerCall = "            registerInvocation("
            hangingIndentation = String(repeating: " ", count: (registerCall as NSString).length)
            result += registerCall + "for: ." + subID + "_setter"
            result += ",\n" + hangingIndentation + "args: "
            result += (sub.parameters.map { $0.name } + ["newValue"]).joined(separator: ", ")
            result += ")\n"
            result += "        }\n"
        }
        result += "    }\n"
    }
    
    for variable in proto.allVariables {
        for (attrName, attr) in variable.attributes {
            result += "    " + attr.description + "\n"
        }
        
        result += "    " + (variable.isStatic ? "static " : "") + "var " + variable.name + ": " + variable.typeName.name + " = "
        result += dummyValue(for: variable.type, typeName: variable.typeName)
        result += "\n"
    }
    
    result += "}\n\n"
}

for (name, (type, typeName)) in dummyValueTypes {
    guard let type = type else {
        continue
    }
    
    let suitableInits = type.initializers.filter {
        $0.isInitializer && !$0.isFailableInitializer && !$0.throws && !$0.rethrows && $0.parameters.isEmpty
    }
    
    guard !suitableInits.isEmpty else {
        continue
    }
    
    result += "extension " + name + ": DefaultInitializable {}\n"
}

%><%= result %>

